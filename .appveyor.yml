#: # Appveyor configuration ([source](../appskeleton/appveyor.yml))
#: The AppVeyor configuration tells AppVeyor how to build the app.
#: See the [AppVeyor documentation](https://www.appveyor.com/docs/appveyor-yml/)
#: for specific questions.
#: 
#: If you use this skeleton, you should only need to edit the following keys:
#: - `version`: the package version
#: - `deploy.username`: your username, even if you commit to the official repository
#: - `deploy.api_key.secure`: your *encrypted* API key. Use the
#:   [encryption utility](https://ci.appveyor.com/tools/encrypt) to encrypt it.
version: 1.13.0.{build}
pull_requests:
  do_not_increment_build_number: true
shallow_clone: true
#: ## Environment variables
#:
#: Variables (`VAR`) defined here can be used in the build scripts (Windows: `%VAR%`, Linux: `${VAR}`).
#: 
#: They can also be overridden in the build tool (`ci_console.html` in your local
#: labstreaminglayer/labstreaminglayer repo) to build with a special configuration.
#: 
#: each subgroup in `environment.matrix` will start a separate, clean build with the
#: environment variables. This is useful in building on different operating systems
#: (different `APPVEYOR_BUILD_WORKER_IMAGE`s) or compiler versions (i.e. through `VCVER`)
environment:
  lsltag: 1.13.0-b12
  lslversion: 1.13.0
  LSLDIST_URL: "https://github.com/sccn/liblsl/releases/download"
  CMakeArgs: ""
  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      QTCOMPILER: msvc2017_64
      QTVER: 5.12
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
      DEPLOYNAME: Linux64-xenial
#: # The `install` section
#: 
#: List everything here to prepare the (clean) build server.
#: 
#: Everything prefixed with `- cmd:` is only executed on windows,
#: `- sh:` on Linux.
install:
- cmd: appveyor DownloadFile https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-win.zip -FileName ninja.zip
- cmd: appveyor DownloadFile %LSLDIST_URL%/%lsltag%/liblsl-%lslversion%-Win64.7z -FileName liblsl_x64.7z
- cmd: 7z x ninja.zip
- cmd: set PATH=%cd%;%PATH%
- cmd: 7z x liblsl_x64.7z -oLSL
- cmd: ninja --version
- sh: set -x
- sh: wget ${LSLDIST_URL}/${lsltag}/liblsl-${lslversion}-${DEPLOYNAME}.deb -O lsl.deb
- sh: dpkg -x lsl.deb LSL
- sh: sudo apt update && sudo apt install -y qtbase5-dev
build_script:
- cmd: call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
- cmd: cmake -S . -B build -G Ninja -DQt5_DIR=C:/Qt/%QTVER%/%QTCOMPILER%/lib/cmake/Qt5 -DBOOST_ROOT=C:/Libraries/boost_1_69_0 -DLSL_INSTALL_ROOT=LSL/ %CMakeArgs%
- sh: cmake -S . -B build -DLSL_INSTALL_ROOT=LSL/usr -DLSL_UNIXFOLDERS=1 ${CMakeArgs}
- cd build
- cmake --build . --config Release --target install
- cpack -C Release
#: ## Artifacts
#: 
#: If you want the built binaries in addition to the build log, you can define
#: which paths (`path`) get compressed to which archives (`name`). You can use
#: environment variables as placeholders (`$(lslversion)`).
artifacts:
- path: 'build/*.deb'
- path: 'build/*.tar.*'
- path: 'build/*.7z'
